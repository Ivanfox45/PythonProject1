from utils.run_folder import get_next_run_folder, create_readme
from parsers.base_sites import SITES
from utils.logger import log_error
from datetime import datetime
import time
import os
import sys

def run_parser(name, ParserClass, results_dir, success_list):
    readme_path = os.path.join(results_dir, "README.txt")
    try:
        # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –ø–∞—Ä—Å–µ—Ä–∞ –±–µ–∑ –ø–µ—Ä–µ–¥–∞—á–∏ results_dir
        parser = ParserClass()
        # –ï—Å–ª–∏ –Ω—É–∂–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å results_dir, –¥–µ–ª–∞–µ–º —ç—Ç–æ –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è
        if hasattr(parser, 'set_results_dir'):
            parser.set_results_dir(results_dir)
        parser.parse()
        print(f"[‚úì] {name} ‚Äî —É—Å–ø–µ—à–Ω–æ")
        with open(readme_path, "a", encoding="utf-8") as f:
            f.write(f"[‚úì] {name} ‚Äî —É—Å–ø–µ—à–Ω–æ\n")
        success_list.append(name)

    except Exception as e:
        short_error = log_error(name, str(e), results_dir)
        with open(readme_path, "a", encoding="utf-8") as f:
            f.write(f"[X] {name} ‚Äî –æ—à–∏–±–∫–∞: {short_error}\n")
        print(f"[X] {name} ‚Äî –æ—à–∏–±–∫–∞: {short_error}")
        return short_error

def parse_unparsed_sites(results_dir, run_name):
    print("\n[üîÅ] –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥: —Ç–æ–ª—å–∫–æ –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —Å–∞–π—Ç—ã")

    parsed_names = {
        f.split("_")[0]
        for f in os.listdir(results_dir)
        if f.endswith(".txt")
    }

    success = []
    failed = {}

    for name, parser_class in SITES.items():
        if name in parsed_names:
            continue  # —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω

        error = run_parser(name, parser_class, results_dir, success)
        if error:
            failed[name] = error

    print("\n[üìÉ] –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –∑–∞–ø–∏—Å—å README.txt —Å —É—á—ë—Ç–æ–º –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
    create_readme(
        results_dir,
        run_name,
        site_keys=SITES.keys(),
        success=success,
        failed=failed,
        elapsed=None
    )

def main():
    resume_mode = "--resume" in sys.argv

    if resume_mode:
        base = "results"
        all_runs = sorted([d for d in os.listdir(base) if d.startswith("run_")])
        if not all_runs:
            print("[‚ùå] –ù–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –∑–∞–ø—É—Å–∫–æ–≤ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏.")
            return
        run_name = all_runs[-1]
        results_dir = os.path.join(base, run_name)
        print(f"[‚ôªÔ∏è] –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –∑–∞–ø—É—Å–∫–∞: {run_name}")
        parse_unparsed_sites(results_dir, run_name)
        return

    # –û–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º
    results_dir, run_name = get_next_run_folder()
    print(f"[üì¶] –ó–∞–ø—É—Å–∫: {run_name}")
    print(f"[üìÅ] –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤: {results_dir}")

    start = time.time()
    success = []
    failed = {}

    for name, parser_class in SITES.items():
        error = run_parser(name, parser_class, results_dir, success)
        if error:
            failed[name] = error

    elapsed = time.time() - start

    create_readme(
        results_dir,
        run_name,
        site_keys=SITES.keys(),
        success=success,
        failed=failed,
        elapsed=elapsed
    )

if __name__ == "__main__":
    main()